Section 1. Execution Global

_ Your code is run, because your code is wrapped inside an execution context.

_ Javascript engine creates a Global object 'window' and a special variable called 'this'.

_ window = this

_ variable and function 'not inside function'  -> global

================================
Section 2.

10 - Creation and Hoisting

_ 1st phrase: Execution Context is create (CREATION PHASE).

_ Hoisting: It's not actually moving code to the top of the page.

_ Before your code begins to executed line by line, The Javascript engine has already set aside memory space 
for the variables and all of the function that you've created.

_ When Javascript engine sets up the memory space for 'a', it doesn't know what its value. So instead, it puts a placeholder called 'undefined'.

_ All variables in Javascript are initially set to 'undefined', and functions are sitting in memory in their entirety.

_ Code:

b(); // Called b!
console.log(a); // undefined -> hoisting 

var a = 'Hello World'; // delete this line -> Uncaught ReferenceError: a is not defined

function b() {
    console.log('Called b!');
}

----------------------------
11 - Javascript and undefined

_ 'undefined': that means the variable hasn't been set. It's actually taking up memory space.

_ Uncaught ReferenceError: a is not defined -> because that initial execution context creation (creation phase), when it went through it didn't find 'a' var.
So it never set up the memory space.

_ Never set 'a = undefined' -> cannot set anything, only use for debug


----------------------------
13 - Javascript is Single thread, Synchronous execution in its behavior

_ Single thread: one command at a time.

_ Under hood of browser, maybe not.

_ Synchronous: only one thing is happening at a time.

----------------------------
14 - Function invocation and The execution stack

_ b() finishes, because it's at the top of the stack, it will get popped off the stack.
Then a(), then back down to Global Execution Context.

_ Every function is called, a new execution context and 'this  variable is created for that function.
The variables within it are set up during the creation phase. And code is executed line by line.

_ Everytime a function is invoked, even if it's invoking itself, a new execution context is created, put on top of the stack.
When it finished, it popped off the stack.

----------------------------
15 - Function, Context and Variable Environments

_ Variable environment: where the variables live (global object - a window in a browser).

_ myVar declare three times -> they're distince, unique and don't touch each other. Each of these 'myVar' is sitting in its own execution context.

function b() {
    var myVar;
    console.log(myVar);//undefined
}

// a's execution context
function a() {
    var myVar = 2;
    console.log(myVar);//2
    b();
}

// global execution context
var myVar = 1;
console.log(myVar); //1
a();
console.log('a:' + myVar); // a:1

----------------------------
16 - Scope chain

_ Every execution context has a reference to its outer environment.

_ Particular execution context, if it can't find that variable, it will look at the outer reference and go look for variables there.
Depends on where the function sits lexically.

_ Scope: where can I access a variable.

_ Chain: is those links of outer environment references.

_ Lexical: that is where it was physically written in your code.

----------------------------
17 - Scope, ES6 and let

_ Scope: where a variable is available in your code. And if it's truly the same variable, or a new copy.

_ let: allows Javascript engine to use what's called block scoping.

----------------------------
18 - What about Asynchronous Callbakcs

_ Asynchronous: more than one at a time.

_ The browser is going to place that click event on the event queue. When Javascript going to look at that event queue and process it?
-> the function completed and the global code completed, before it went off and created an execution context for that clickHander() function. Why?
 
_ Because the Javascript engine won't look at the event queue unitl the execution stack is empty.

_ It runs normal code synchronous, then it just will continue to watch that event queue in the loop. Deals with asynchrnous events.

_ Any events that happen outside of the engine get placed into that queue. 


================================
Section 3. Types and Operation

19 - Types and Javascript

_ Dynamic Typing: you don't tell the engine what type of data a variable holds, it figures it out while your code is running.

----------------------------
20- Primitive Types: a type of data that represents a single value

_ 'undefined': represents lack of existence (you shouldn't set a variable to 'this') -> leave for engine
_ 'null': represents lack of existence (you can set a variable to 'this') -> you can use null
_ 'boolean': true or false
_ 'number': floating point number (there's always some decimals). Javascript has only one type 'number'.
_ 'string': a sequence of charaters (both '' and "" can be used).
_ 'symbol': used in ES6

----------------------------
21- Operation precedence and associativity

_ Operation precedence: which operator function gets called first (HIGHER precedence wins).

_ associativity: what order operator functions get called in: left-to-right or right-to-left-to-right WHEN functions have the same precedence.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

----------------------------
24- Coercion

_ Converting a value from one type to another.

================================
Section 4. Types and Operation

32- Objects and Functions

_ Namespace: a container for variables and functions

JSON: JavaScript Object Notation

----------------------------
34- Functions are Objects

_ First class functions: everything you can do with other types, you can do with functions.

_ Assign them to variables, pass them around, create them on fly.    

----------------------------
36- By Value by reference

_ var a = 3. Variable 'a' has an adress location 0x001. The reference is really to a location in memory.

_ b = a -> 'b' new variable, points to a new address 0x002 and the same value 3.

=> by value

_ set 'a' equal to an object and address location is 0x001.

_ b = a -> points to the same location in memory 0x001. No new object to create. No copy object to create.

=> by reference

_ 'mutate': to change something.
_ 'immutable': means it can't be changed.

----------------------------
39- Arguments and Spread

_ Arguments: the parameters you pass to a function, contain a list of value.

----------------------------
42- Dangerous - Automatic Semicolon Insertion

_ return<Enter> -> Javascript engine automatically create semicolon ';'

----------------------------
43- Whitespace

_ Whitespace: invisible characters that create literal 'space' in your written code. Carriage retunrs, tabs, spaces.

----------------------------
46- Closures

_ Execution context has it's space in memory, where the variables and functions created inside of it live.

_ At the moment that execution context finishes, the memory space is still there. 'whatToSay' is still there.

_ When call sayHi(), it's execution context still has a reference outer lexical environment and find 'whatToSay'.

----------------------------
49- Closures and callback

_ Callback function: a funtion you give to another function, to be run when the other is finished.

_ I call function A, and give it function B. When A finishes, it calls B -> callback.

----------------------------
50 - Closures and callback

_ All functions in JavaScript can access three methods.

_ Function currying: creating a copy of a function but with some preset (dat truoc) parameters

----------------------------
53 - Classical and Prototypal Inheritance

_ Inheritance: one object gets access to the properties and methods of another object.

_ Classical Inheritance: verbose
+ friend
+ protected
+ private
+ interface

_ Prototypal Inheritance: simple
+ flexible
+ extensible
+ easy to understand

_ All objects have a prototype property. The property is simply a reference to another object (proto).

_ 'obj.prop2' looks for on 'obj' itself. Do not find 'prop2', it next goes to the prototype. Find and return it.

_ 'obj2.props2' is the same spot in memory as 'obj.props2'

----------------------------
55 - Everything is Object

_ Everything has prototype, except base object.

_ Base object is bottom of prototype chain.

----------------------------
56 - Reflection and Extend

_ Reflection: an object can look at itself, listing and changing it's properties and methods.

----------------------------
63 - Object.create

_ Polyfill: code that adds a feature which the engine may lack.